#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;

// Notice that the "1" here equals the "1" in glVertexAttribPointer
layout(location = 1) in vec3 vertexNormal_modelspace;

//texture data
layout(location = 2) in vec2 vertexUV_modelspace;

// Values that stay constant for all vertices
uniform mat4 MVP; //model-view-projection matrix
uniform mat4 MV; //model-view matrix

// Output data ; will be interpolated for each fragment.
out vec3 fragmentNormal;
out vec3 viewDirection;
out vec2 fragmentUV;

out vec3 v_position;


void main(){

	// Output position of the vertex, projected on screen
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// Normal of the vertex
	//fragmentNormal = vertexNormal_modelspace;
	
	fragmentNormal = ( MV * vec4(vertexNormal_modelspace,0) ).xyz; // [Q1d] Uncomment this line and comment the previous one. Note, we set the 4th coordinate to 0 because the normal is a vector, we only want to rotate it, not translate it. This only works if MV doesn't also contain a non-uniform scaling.

	// Direction of the view with respect to the vertex, expressed in view space 
	// Note: in view space, the camera is at (0,0,0). So the direction of the view from the vertex is -p, where p is the vertex position in view space 
	viewDirection = - ( MV * vec4(vertexPosition_modelspace,1) ).xyz;

	fragmentUV = vertexUV_modelspace;
	v_position = (vec4(vertexPosition_modelspace, 1)).xyz;	
}